body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

header {
    background-color: #333;
    color: #fff;
    padding: 20px;
}

h1 {
    margin: 0;
}

main {
    padding: 20px;
}

section {
    margin-bottom: 20px;
}

h2 {
    color: #333;
}

pre {
    background-color: #f4f4f4;
    padding: 10px;
    overflow-x: auto;
}

code {
    font-family: Consolas, monospace;
}

ul {
    list-style-type: disc;
    padding-left: 20px;
}

img {
    max-width: 75%;
    max-height: 250px;
    display: block;
    margin: 20px auto;
}

section {
    margin-bottom: 40px;
}

a {
    color: #808080;
    text-decoration: none;
}

@keyframes body {
    to {
        background-color: rgb(19, 48, 97);
    }
}

.progress {
    height: 3px;
    width: 0%;
    background-color: #fff;
    position: fixed;
    top: 0;
    right: 0;
    animation: progress 1s linear;
}

@keyframes progress {
    to {
        background-color: rgb(0, 0, 0);
        width: 100%;
    }
}

.cube-wrap {
    --size: 65px;
    position: fixed;
    bottom: 50px;
    right: 50px;
    width: 0;
    height: 0;
    perspective: 100vmin;
}

.cube {
    transform-style: preserve-3d;
    transform: rotateX(0deg) rotateZ(45deg) rotateY(-45deg);
    animation: cube 1s linear;
}

@keyframes cube {
    to {
        transform: rotateX(360deg) rotateZ(45deg) rotateY(-45deg);
    }
}

.side {
    position: absolute;
    width: var(--size);
    height: var(--size);
    background-color: #eee;
    backface-visibility: visible;
    top: calc(var(--size) * -0.5);
    left: calc(var(--size) * -0.5);
}

.top {
    background-color: #cccccc;
    transform: rotateX(90deg) translateZ(calc(var(--size) * 0.5));
}

.bottom {
    background-color: #999;
    transform: rotateX(90deg) translateZ(calc(var(--size) * -0.5));
}

.left {
    background-color: #ccc;
    transform: rotateY(90deg) translateZ(calc(var(--size) * 0.5));
}

.right {
    background-color: #ddd;
    transform: rotateY(90deg) translateZ(calc(var(--size) * -0.5));
}

.front {
    background-color: #aaa;
    transform: translateZ(calc(var(--size) * 0.5));
}

.back {
    background-color: #bbb;
    transform: translateZ(calc(var(--size) * -0.5));
}

:root * {
    /* Pause the animation */
    animation-play-state: paused;
    /* Bind the animation to scroll */
    animation-delay: calc(var(--scroll) * -1s);
    /* These last 2 properties clean up overshoot weirdness */
    animation-iteration-count: 1;
    animation-fill-mode: both;
}
